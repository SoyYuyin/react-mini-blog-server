{
  "blogs": [
    {
      "title": "What is react for?",
      "body": "React is used to create responsive, reactive user interfaces with ease. Before react, maintaining dynamic user interfaces could become very complicated very quickly. \n\n With react you define the layouts to be displayed using manageable chunks of code called components, and react takes care of the rest.",
      "author": "Yuyin",
      "image": "react.svg",
      "id": 1,
      "likes": 75
    },
    {
      "title": "The useState hook",
      "body": "The useState hook allows us to create variables that can hold information and which react will be watching for changes. Once a change occurs, react will re-render the component with the updated information.",
      "image": "hook.png",
      "author": "Yuyin",
      "id": 2,
      "likes": 30
    },
    {
      "title": "React components",
      "body": "A react component is baiscally a function which must always return something, generally a JSX template. It can then be exported to other components to create complex application with reusable components.",
      "image": "components.png",
      "author": "Yuyin",
      "id": 3,
      "likes": 18
    },
    {
      "title": "Props",
      "body": "To pass data into our components we can pass it using Props from its parent component. In the child component, we can reference the 'props' object to pull the passed information. Destructuring the bits of data inside our child components is good practice to keep our code more tidy.",
      "image": "props.png",
      "author": "Yuyin",
      "id": 4,
      "likes": 60
    },
    {
      "title": "JSON-Server",
      "body": "This application is currently using the JSON-Server tool to emulate a server to which we can make calls to add new blogs. It's an independent tool from react. To use it locally first you would have to clone the repository for this app from github. Then we can install the JSON local server by calling \n \n 'npx json-server --data/db.json --port 8000'\n \n With this command we define which file to watch as our database, in my case it's inside the data directory. Then specify which port to run on. We choose 8000 because usually the react dev server runs on port 3000. \n\nYou may be wondering why then it's taking an extra second to load info on the homepage.. well, that's just an aritifical timeout added to emulate how to handle the loading using conditional formatting. This won't apply if you are visiting this page with the url mini-react-blog.herokuapp.com in which case you should check the other blog post on CRUD calls ",
      "image": "json-server.png",
      "author": "Yuyin",
      "id": 5,
      "likes": 60
    },
    {
      "title": "CRUD calls not working?",
      "body": "You may have noticed that changes are not persisted between calls. That is because to host this app succesfully we are faking the back end using my-json-server typicode from my-json-server.typicode.com. Which is pretty neat IMO. To see changes when you click on delete or add blog, you'd need to clone the repository and run the app locally. You would also need to run the JSON server locally by opening a terminal and entering the command 'npx json-server --watch data/db.json --port 8000'",
      "image": "typicode.jpg",
      "author": "Yuyin",
      "id": 6,
      "likes": 70
    }
  ]
}
